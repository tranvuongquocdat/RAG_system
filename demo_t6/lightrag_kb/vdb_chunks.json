{"embedding_dim": 768, "data": [{"__id__": "chunk-be16bf7363d8c00fc348d43cfcaf2285", "__created_at__": 1757050262, "content": "--- File: Pricing Optimization.txt ---\n\nProject:  Pricing  Optimization  \nDocumentation  \nSecurity  This  document  may  not  be  shared  in  any  form  outside  the  scope  of  the  project's  \ndevelopment.\n \nProject  \n●  Objective:  To  obtain  more  favorable  prices  on  files  that  have  not  yet  been  issued.  ●  Statement:  The  organization  wants  to  improve  its  pricing  optimization  system,  which  is  \ncurrently\n \nbased\n \non\n \nautomatic\n \nrebookings\n \nand\n \nspecific\n \nalerts.\n \nThe\n \ncurrent\n \napproach\n \nis\n \nlimited\n \nbecause\n \nit\n \nanalyzes\n \nfiles\n \none\n \nby\n \none,\n \nlacks\n \na\n \nglobal\n \nview,\n \nand\n \ndoesn't\n \nuse\n \nhistorical\n \nor\n \ncompetitive\n \ndata,\n \nso\n \na\n \nmore\n \nstructured\n \nprocess\n \nis\n \nneeded.\n ●  Goal:  The  project  aims  to  consolidate  data  from  logs  and  bookings,  identify  the  best  time  \nwindows\n \nfor\n \noptimization,\n \nand\n \ncreate\n \nan\n \noperational\n \nreport\n \nthat\n \ncan\n \nbe\n \nused\n \nby\n \nthe\n \nteams.\n \nContext  Currently,  the  pricing  optimization  system  detects  price  drop  opportunities  as  they  \nhappen,\n \nwithout\n \nprioritizing\n \nor\n \ngrouping\n \nthem\n \nacross\n \nmultiple\n \nfiles.\n \nThis\n \nleads\n \nto\n \na\n \nwaste\n \nof\n \ntime\n \nand\n \nunderutilizes\n \nthe\n \npotential\n \nfor\n \nsavings.\n \nThe\n \nproject's\n \ngoal\n \nis\n \nto\n \ndevelop\n \nan\n \nautomated\n \nworkflow\n \nthat\n \ncan:\n \n●  Join  and  structure  raw  data  (logs,  bookings).  ●  Isolate  relevant  optimizations  (status  S).  ●  Analyze  gains  and  itineraries.  ●  Identify  the  best  opportunities  by  day  and  route  through  aggregation.  ●  Return  these  results  in  a  usable  format  and  distribute  them  automatically.  \n \nSpecifications  \n1.  Development  Environment  To  simplify  development,  the  client  has  provided  database  \nextracts\n \nin\n \n.csv\n \nformat.\n \nOnce\n \nthe\n \noptimization\n \nscript\n \nis\n \nready,\n \nthe\n \nteam\n \nwill\n \nneed\n \nto\n \nconnect\n \nto\n \nan\n \nAPI\n \nto\n \nget\n \nthe\n \ndata\n \ninstead\n \nof\n \nusing\n \nthese\n \n.csv\n \nfiles.\n \nThe\n \nAPI\n \nwill\n \nprovide\n \nthe\n \ndata\n \nin\n \nan\n \nidentical\n \nformat.\n \nThe\n \ndata\n \nvolume\n \nis\n \nabout\n \n1GB\n \nonce\n \nconnected\n \nto\n \nthe\n \nAPI.\n \n2.  Data  Joining  \n●  Files:  cdv_log_operation.csv (logs)  and  cdv_wnj_air_booking_view.csv \n(bookings).\n ●  Join  Key:  cdv_log_operation.lgop_element_id =  cdv_wnj_air_booking_view.wbkg_reference.  \n●  Action:  Join  the  two  tables  to  extract  the  necessary  data  for  calculating  the  optimization  \ndatetimes.\n \n3.  Record  Filtering  \n●  Action:  Keep  only  the  rows  where  cdv_log_operation.lgop_status =  'S'.  \n4.  Data  Extraction  for  Calculations  \n●  Optimization  Datetime:  cdv_log_operation.lgop_when.  ●  Airline:  cdv_wnj_air_booking_view.dair_code.  ●  Start  of  Trip:  cdv_wnj_air_booking_view.FromAirportCode.  ●  End  of  Trip:  cdv_wnj_air_booking_view.ToAirportCode.  ●  Travel  Dates:  cdv_wnj_air_booking_view.wbkg_start_date.  ●  Gain:  From  cdv_log_operation.lgop_results.  \n \n5.  Analytical  Aggregation  of  the  Optimization  List  \n●  Sort  records  by  airline:   cdv_wnj_air_booking_view.dair_code.  ●  For  each  airline  (cdv_wnj_air_booking_view.dair_code),  keep  the  records  with  \nthe\n \nbest\n \ngains\n \n(cdv_log_operation.lgop_results)  when  the  Start  of  trip,  End  of  \ntrip,\n \nand\n \nTravel\n \ndates\n \nare\n \nidentical.\n ●  For  each  airline,  if  one  of  the  conditions  (Start  of  trip,  End  of  trip,  or  Travel  dates)  is  not  \nidentical,\n \nkeep\n \nthe\n \nrow.\n ●  Generate  the  CSV  file  named  \n listeOptimisation_dd-MM-yyyy.csv,  where  dd-MM-yyyy is  the  date  the  file  is  \ngenerated.\n ●  Refer  to  the  example  Excel  file  (Exemple  rapport  optimisation.xlsx)  and  fill  in  \nall\n \nthe\n \nrequired\n \ndata\n \nbased\n \non\n \nits\n \ncorrespondence.\n \n6.  Nuanced  Time  Analysis  \n●  For  each  airline,  after  extracting  the  best  gains,  the  goal  is  to  find  average  trends.  ●  Calculate  the  average  gains  by:  ○  Time  of", "full_doc_id": "doc-ad0f506e8e172ba6e3d1d6c1ce17bbac", "file_path": "unknown_source", "vector": "eJwNzolXFGUAAHDR6JVHiWnisrszs/PNN98cSwqpRKngRQfaJVJpWQlPjUqKHqBJ+HooXR6JBivb7tzzzTeDGIEU+ihFS7IQUPOVR2klhh2PtMtC6vcX/M6gyaZrPhd8VlqNvqFe4L+E69B8tADdhsZE13A5biE4yGd66VSmk2EMGmOcscYe64R2CPmk340O6RI6Bb71AFcr/mb9GuwMlHvT3FTuG+MKOqRNxBXuDDnbWSFWyrW0o8+Sl3qc/rnzoFmHmsGPyMPRKHXL3NDoN4q5BHcZSXE2KlXcJseMKLinZo+RoX8MTnD8+MPoVrmXmosSbSmebSTUhtnsDbeEjsZ20RunbPb6Gnp2DcqjxU8D6ehp+gBpQk8a0+3XyTVyBIRD0yQTdKr7zLvA8cgz0oDTqr0n5gspDVbY5nKdP+lSX9yIawPCTe4SXEUfx4/EF3JlQra5RypDw737d3voe98E7nb+XDgLq0w3vqadtrr403B9zMd+7e+XW+FFcNl8ga3xNVoHrRHOBuMRMsvI1SaY5/HfXlfsH/sHUyJ/2oJxOXWIXqS+bBOaZtbqmNovzZa71LQd650IgFZAkMF9pJ9dRaaK9fgCuyK+Tc2AF6xGapt+QQwx91gdpITsi1UZe6VR/OLUJPWO5JnGEOhHLDcovQ3kqMOmuRTwRdZab8uW1czONWpYDXxin6ybHT7j05QKOQ+sAlPYQzjeMC++j7VBqT+ZjAAzlbJQYgSYrdwcpwC3k22xdpLc8CoupJJTJLHNU51pW5OJUF9gHkEDzvNe5c4r0SHIOHP4Yc7N6DVYQj2NJ4bfFLvJRZIjHgMZYp1M04X0nFBWoI8eHy4zN0/E3N5orr6serUQYH81K2/tMW4av2X3J06So4A8OQ1s99cqeyfl0Eu3q4Eadibp4Dv1kfRSayu8gkrxUWGn4Fcu1W4W/OIGJt9JNyh0xoDRbrFImCyt4MrBl4FFRje7jktk9uGHlMlR6DyPGsaNcy+jYr5JyTJn28NRgTQs8h6zyXmAX66VI7+abge4XdRQsI9o0t12r3GP0Ixv1IvkNG4G+BcfQwpJ0kKxFCaHTdTyw++bh+kycY0cjNbZp9HN6LBOGbcDRjlJvZjSHlgL30I0nI4eC/xkD4Be7+Ho1UCPeUY6TM+DnXjQn2MVCfN9K8lfVjY8p1WoY6W2kZ12F8pLWe20kIz/t1vrpWCps7BxCUWh3glRc9BYgg1wXr8gZDhUNN2n8PWIZ/NTPeMsKIQdbtP4G8RK9n5nHpmGFwW/C70C/xZpxU8+gA1KLniV6oUt1he+Qj1f+VmohGvJftgrd3AN8SmkJ5INfXYtOyDuCT6Ikskb0kF2JVwPz+7cQrLiv/BXY+nWfmGG2ULuxmfVVfAomu4c4KtFAwyyWaCDv1NuURJEhG6E+TBWV4uuJjdzeWom1+oIsl9vV74IVrHHacPeItZZfaZpVdEf4ZNWOelTiv0ncC4q9Y9wE1ABcz75WWd37RjriD5kPoFc/52UOHYWko3lIS3WxPm5z6gOOxx/3FdBryJt6Br+SitBLfS8wCX8tflm+AQ+S2e5ieRer9EaZS+I90kLjGN2mrvYfMVhdma6mfXt4mLJitdZSewoRVSa0FSxmt2tQ5wnF7vduCDyllViF8rD8ErjoiaFz717L8H8j3yuOhfOF4m6LvVR+zOwnlSElpoTgAmK9G77ktNmHLIa7U1CNpbsScpwLWL2qEVqAjNZqLSeM9pwBpcY8uJH2Gy+lXkKPIGu21HpjHV/kErBAetbtOQdpPvlRN3kr7cn+bfD95kbdpV5t8HRyh+8KnaRLiNofYTK5X5QMu4u5UM+KCxOOWDHYAxDYY64mk+CFWQkLmBGhGrMYKjI/p6ZhE/hZjzjnWXWDs/lOd8z+imSShUzMVS9ReGmaidJI+6H9WgNuwISa7q1jmG4haZIYXv5u9V6GJxCL+n/ATG3oOw="}, {"__id__": "chunk-a62d3c17530c4bec73685d30bba676a4", "__created_at__": 1757050262, "content": "file  (Exemple  rapport  optimisation.xlsx)  and  fill  in  \nall\n \nthe\n \nrequired\n \ndata\n \nbased\n \non\n \nits\n \ncorrespondence.\n \n6.  Nuanced  Time  Analysis  \n●  For  each  airline,  after  extracting  the  best  gains,  the  goal  is  to  find  average  trends.  ●  Calculate  the  average  gains  by:  ○  Time  of  day  (e.g.,  gains  are,  on  average,  better  around  3  a.m.).  ○  Day  of  the  week  (e.g.,  Tuesday  is  more  favorable  than  Friday).  ○  Combined  day  +  hour  (e.g.,  Monday  at  10  a.m.  gives  the  best  average  results).  ●  From  the  \n cdv_log_operation.lgop_when column  (optimization  datetime),  extract  the  hour  of  \nthe\n \nday\n \n(an\n \ninteger\n \nfrom\n \n0\n \nto\n \n23)\n \nand\n \nthe\n \nday\n \nof\n \nthe\n \nweek.\n ●  Average  by  Time  of  Day:  Group  all  rows  by  hour  (regardless  of  the  day)  and  calculate  \nthe\n \naverage\n \ngain\n \nfor\n \neach\n \nhour.\n \n●  Average  by  Day  of  the  Week:  Group  all  rows  by  the  day  of  the  week  and  calculate  the  \naverage\n \ngain\n \nfor\n \neach\n \nday.\n ●  Combined  Average  (Day  +  Hour):  Create  a  combination  of  day  +  hour  (e.g.,  Monday  at  \n10\n \na.m.,\n \nMonday\n \nat\n \n11\n \na.m.,\n \nTuesday\n \nat\n \n9\n \na.m.,\n \netc.,\n \nwhich\n \nis\n \n7×24\n \ncombinations).\n \nCalculate\n \nthe\n \naverage\n \ngain\n \nfor\n \neach\n \ncombination.\n ●  Ranking  Slots:  For  each  grouping  (hour  only,  day  only,  day  +  hour),  sort  the  results  by  \naverage\n \ngain\n \nin\n \ndescending\n \norder.\n \nKeep\n \nthe\n \n \nTOP\n \n3\n \nfor\n \neach\n \ngrouping.\n ●  JSON  Output:  Save  the  results  in  a  file  named  topOptimisation.json.  The  file  \nformat\n \nis\n \nspecified\n \nin\n \nthe\n \ndocument\n \n.\n \n7.  Results  Distribution  \n●  Deposit  the  CSV  and  JSON  files  on  an  SFTP  space  (coordinates  to  be  specified).  ●  The  files  must  be  deposited  between  2  a.m.  and  4  a.m.  GMT+1.  \nData  Provision  \nTo  facilitate  development,  the  client  is  providing  two  databases  in  .CSV  format,  which  represent  \n20-30%\n \nof\n \nthe\n \ntotal\n \ndata\n \nvolume\n \nto\n \nbe\n \nprocessed:\n \n●  cdv_log_operation.csv  ●  cdv_wnj_air_booking_view.csv  \nTheir  architecture  files  are  also  provided:  \n●  cdv_log_operation.md  ●  cdv_wnj_air_booking_view.md  \nThe  Excel  file  for  building  the  CSV  report  is  also  included  (Exemple  rapport  \noptimisation.xlsx).  The  data  order  must  be  respected  as  transmitted  in  the  file.  \nAdditional  Information  \n●  The  required  technology  for  this  project  is  Python .  \n \nDevelopment  Timeline  (Adjusted)  \n●  Phase  0  -  Project  Launch:  September  3-5,  2025  ○  Retrieve  and  validate  example  files  (CSV  extracts).  ○  Set  up  the  local  development  environment.  ○  Verify  data  schemas  and  formats.  ●  Phase  1  -  Development:  September  8-26,  2025  \n○  Develop  the  application.  ●  Phase  2  -  API  Connection  and  Project  Follow-up:  ○  September  15,  2025:  API  for  real  data  retrieval  becomes  available.  ○  September  16,  2025:  Project  meeting  with  the  client  to  validate  the  API  \nconnection\n \nand\n \nprogress.\n ●  Phase  3  -  Advanced  Feature  Development:  September  17-19,  2025  ○  Adapt  the  pipeline  for  ingestion  via  the  API  (instead  of  CSVs).  ○  Verify  schema  compatibility  between  CSV  and  API.  ●  Phase  4  -  Finalization:  September  29  -  October  2,  2025  ○  Run  unit  and  performance  tests  on  ~1  GB  of  data.  ○  Make  adjustments  based  on  client  feedback.  ●  Phase  5  -  Delivery  and  Final  Acceptance:  October  3,  2025  ○  Put  the  application  into", "full_doc_id": "doc-ad0f506e8e172ba6e3d1d6c1ce17bbac", "file_path": "unknown_source", "vector": "eJwN0ItXVGUCAPAlSbADrgQYw8ww9/Hd7373MeDR4zn5CCE1w1ZXzVfqLkcxS0Q017cCsmUqluaLcWQG7sy9373fd++MlJoJlrRRrZZanW2zLAlZpdBjhGPGymrb70/4bRd/0ruMKdGTcgs8JtyW3KBS7Gd1VCn/AXZ72vBS7JIfP7q0/h59xFhD4qQ7uL3+E9NAq7ld2peiJMw9UuRsY1+Q32bmoc+5Ew4f2yWsP5wjt7J9DYtjktJJ6+Xv5O88OyLJSn/srNdr/8XEaKLkk2ebk8O9xr9BGZ4PB9mbYyft0+Ehwss0yFc4w7jjIQ8tAONgcyQgqn4grpPP2XNddVax8anXg+ZAAx7K/rrgiXhWfMLRDuWM+NueEvQq9FFGXAGm2jedRc7z/LFDnDqWx1YZQWIvTlbKbA78BFvFgvja/FRpsLPRu0M8b6rWOvVX2kWYphuBu+4CEYF/4kz1ffkDJ3D0GagbXbBF/tBv0mDeeXs+XmLO4afCBVFewniuf5B8hfu71pubzDbY5b/fpJNqWh+5bxSRM1aJPRvcCe+2mXgvKaFb82+CGdE3w61gKLTMIiQqG5Vz7A3Q9/viMvI31AzH2NvQr7E0FPO+o82KJkWHcc/iCj1qDfFfCR3XUp1OutD4BD9QXOjbfOq8w8zJm6JsgCU+j1oGrcApkEIGZ2Xzr+glKiI9qMboZIZ43qM/v5ahRPn1kaC0RZwkdICxdnb8R+MMWyNWRBKk1Fdl3TmyROvWUkA82kwTdhL12q/HHyFusLCxDcnxKmeHZ789070B9zGXaboj4HxtOqwhAD3QTgsATgOLnXL/UnlSLJ30S5fYAXGBfAhC8KLuhgPmBLWFPusDbJGxyJwSPgFvp/7L+khfafUyKW+VBjfleIURajosbazVR3vLeQpeMi0hm1ajlcMLclZZH6MslEruouvKUK2nbqK0XU3heRzFS9AkMpB2T8hDLymVoI6pPtKeq+Wm8M+BLFKGJ8oemoH2M1foQnmftDjYG86kScI8xYTVbAdZyaXhKhHiQqOZWavtFT+i5ZKLjgr0SZVkL+mU3Xlvsq6D1dJm58bQWnZdxhruRHiZctLUjS3yIHVCpD2SJT4txq1anC2cYHKyJvPXfNs4gO4Jl6X/iN20uP54vM7XzoasbrhPnwaOkVkgYU6V3WlizBcIgeXhW4f/xBQz982ZUEHZ+Hu61RrJnnf9sfGOQ5tflPai65ktmJgbH5OYNcN1+ZSVrIdyl8LR6Bthc/7qAyCyx9MRuxUcL10N36TXaKm1HJQJq7gWdQzgo7nuPa7BsD+0BfJkVKQR1xkzVChcJ1flBf4g+HbfxJjXgOiCVSi/ryZ5b8F99kHBFubBXBRga63V2EZfGFX6L4qtszbRRKNNGiKz8auirW7d/5D+pLtSykAGGo528uNQD7wYSqCPYRW3vmEu2NJ4UeUbO8L9IDdcJFzNeUJ6zXxXS8F79BWkyVyHzzTFkWr9IO8Sn6Euz0hmNrMzlsFdJKetEcZuaT4IPHY6u0LoDzwqkMgK+DBMBheCLjxDaz2SY38K7psJkhA3cZuMGu0zpk/NpgKYZTHmsNjBSJpREClGr0R3kpHOVG68lRQ5HMsHhVK6LDQ85LvLj7cy7TfQc2oZdyl6yhjlzyXPk0mhl/F165YvYU3AlbhW8nuK6TW4nCkw3PKARNj9+UPpXraFlBsFZIewfpA/NIoMj20gv3lk80nuMq3QfzHH+XrwAVxq5Ahd6B+4Bz8VGY2H8RcatMjZQ5c8Y4189Cj8MzlrI3WMt6Lpa/g6aSEDcikdLX2IK5t2weqcRfHpTh74X3ShsFgGzlj8NGkTD0gfwGKehr5SvhRHeKbgQpggbjkZHRMeiD84RTRF/y/s9LRrY0LHxVV4plNorbXmGMApQqlhaqXYVw7PdNWADW4FtIrL6Db6I9OFzgkNUpe2iCwTduNMs529rf1Vb4tqQq+UiPwfvNSY2A=="}, {"__id__": "chunk-7b2c3478969128a8829e5e7bd4f5a963", "__created_at__": 1757050262, "content": "-  Finalization:  September  29  -  October  2,  2025  ○  Run  unit  and  performance  tests  on  ~1  GB  of  data.  ○  Make  adjustments  based  on  client  feedback.  ●  Phase  5  -  Delivery  and  Final  Acceptance:  October  3,  2025  ○  Put  the  application  into  production  on  the  client's  environment  (server  \nconfiguration\n \nhandled\n \nby\n \nthe\n \nclient).\n ○  Final  acceptance.  \nKey  Milestones:  \n●  September  3:  Start  of  development  with  example  files.  ●  September  15:  API  becomes  available.  ●  September  16:  Follow-up  meeting.  ●  October  3:  Production  delivery.", "full_doc_id": "doc-ad0f506e8e172ba6e3d1d6c1ce17bbac", "file_path": "unknown_source", "vector": "eJwN1ItXFWUCAPBVEBCVuOvlJdzLvL75vm9mrsSmLYKeI5zTQ8WVXU3zAb18xQaZZ12XxGVVJK2TIiKCPO68vplv5g5kBpqhyUkpy3epWVSwLqmd3B6Eui6pu78/4leVVAYqUmPsy7BLMPY+ijvh06zEVIyPwqq82B4ER7Uo8WD75syE1iSzwZhMHhP99glicT7xRPrXCO5U6RRawl6BBfgTsUNupgGve9QqKzfULZ4xJnjVSHaG8WFUTCRSpuyKpJh+65ozp4EX9uB+9T3uEed3gaNeqbabJnsb7QfmXXTL7WqtoDN93zZu9w5lfIra2FUoQZmOTjF1dAO/uT3bWNqWmvU6WCvqwCd9551sr+z4XFkEtuhAX9GS593jNK0okh3R7Bx2sVmJ89QN/FWLpm+yP61rogfxb5AFC93eEJTiyHLwDhrlxTtfyvPpCF9PBswUWgqm6z9wAWkvfMIb7U0R3nSWMlmyHgrTFr/fXaD1mdnG42LAnQAneG8rl6VkfJt2pexjhiLR4YvMDU3no9R/uqKV6KHIl2IZKnRaPdv9l3k11I2fsrF1js1A1Zln8Eb5rPJL2izxJrmvPGXXsM3MnbYxbF7Ha+CKUEzPCX6hhhvjTI1UagnyM9ot/Sd3KKKzs2nc5ON88+SQ97S8qD5OmlDbHVBwh/tRS6o0V0tqOCrysERa6vjgoyTDLaKpziUxVz6C8tLm4arML8ASPJWgdq0x3LxAjHeXOrOEXvJtZhy7NVyOi0lTxO+V03uRh62w1g5XULZtTOS9yInMED2kbg/8gX/FftZrssroIuTaUTAIDuzO52dIde5qZRIuIhU6L21DJdgPDjJGeJ44TfyQ5oZepKXCMu1wS4/T0HZMPZvhp+fsv9AtGUUHzrI/JsUIazDH9yR91Lo5sFy6IOTYb2CeroTjjXoh3XmeHZaOk52gUxLrJsr3URragNYH79M3xJ/NGuGCfpvzhyqYEuHKQ0fFe7s2oLFQtI+QIuVVYz2zCs/zr8fvyND6KqWWGoEzcg4s4gPen+w8o5Mb4ZcIp5JuBKeAZZFj6DE3FL6Buo0MDyrzxeeE0aIsrbSeQUJys1qbcsNco2R5g04V+Fia3Tq4z4B84K1IYzDE/srsz2xIu1W/Q4ti3g3OBAtQob2J4Tp+C3NwMl1oXFH3olnhLOWv9lX5sNZlV2ZEcS+phbqLCuR34wPiLpgkJJKhxJAzGNjNdXtbOxYrn4gfmEj/h3k97X0nBlRLW4iPTk09BFQLs3HKHnBXGw7/7P1Xuybk2uV6H33ZnJQyVt0BiFStxfo2kvzqeaazJx+3aV200Lnj/BnFGL3G36UlSjS81lLuraNzWu7YA0CROT5P6qdzm4+JvdxY6XsnO7zfGkKnnTnWQrhdt/kBdZo5H/cD0WsRFoaeZccl7wgWoMX4PJ7Ir2YazVJ4oXGtOCD1BYCwEjexI8o9uon6hMtCLED8d3wRTQ/vYE6pBtPN1OgnwWwcDcbJf+NPktid0/R1++K9noQ2/QUay/fgsj1rUTZXJ28KXpfqYL5eJTzEzd2laL9aOfAzMk64byc545VXhWDrct/LLAkxVgEzYI1KVdqrnHp6OHEdPKeVW55zW/iPOhgodb/BMWgGzBUvta5w15kz7LNCp5zHCsJFfgX+3thCRoKjxIkUB5dbT+L94TugMhhuXYs+Z7eSKKkO/1F4oFwkv0eLCKsPOq/g2jYW9DOT/j/Uk3AJGVaL6aSm82HRfGBmaZcMhWsUruub1XLSQ4uFBfrz5kLtNKlBj3N90tt0q/eVBMx/aweYJ8hNagUeiZzHXzjRIIqW8pr3sJvI95Cvm05IrBdrNlrT00W0DfSKu7U1yosQw07hAATkIr4r9kgj+H33Nj1NlkkKf16tJPHSL/4sp9b4QR/tFLguXD3RF5lpn1G5phfYYaaTkOAQpZZDEkC02Mcfh3vNJphl5Jv96Oa2bRlHnBIwA88K/w9ZvpM0"}], "matrix": ""}
# ==============================================
# RAG SYSTEM ENVIRONMENT CONFIGURATION
# ==============================================
# Copy this file to .env and fill in your values

# ==============================================
# AI MODEL CONFIGURATION
# ==============================================

# Gemini API Configuration (Primary)
GEMINI_API_KEY=your_gemini_api_key_here
GEMINI_MODEL_NAME=gemini-2.0-flash-exp
GEMINI_EMBEDDING_MODEL=models/text-embedding-004

# OpenAI Configuration (Backup/Alternative)
OPENAI_API_KEY=your_openai_api_key_here
OPENAI_MODEL_NAME=gpt-4

# Model Parameters
MODEL_TEMPERATURE=0.1
MODEL_MAX_TOKENS=2048

# ==============================================
# QDRANT VECTOR DATABASE CONFIGURATION
# ==============================================

# Qdrant Connection
QDRANT_HOST=localhost
QDRANT_PORT=6333
QDRANT_GRPC_PORT=6334
QDRANT_API_KEY=  # Leave empty for local development

# Collection Settings
QDRANT_COLLECTION_NAME=enterprise_documents
VECTOR_SIZE=768
DISTANCE_METRIC=cosine

# ==============================================
# RAG PIPELINE CONFIGURATION
# ==============================================

# Retrieval Settings
RAG_TOP_K=5
RAG_SCORE_THRESHOLD=0.7

# Text Processing
CHUNK_SIZE=1000
CHUNK_OVERLAP=200
CONTEXT_WINDOW=4000

# ==============================================
# SECURITY CONFIGURATION
# ==============================================

# Authentication (set to true to enable)
ENABLE_AUTH=false
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
JWT_ALGORITHM=HS256
JWT_EXPIRATION_HOURS=24

# ==============================================
# APPLICATION CONFIGURATION
# ==============================================

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/rag_system.log

# Data Directories
DATA_DIR=./data
UPLOAD_DIR=./uploads

# API Server
API_HOST=0.0.0.0
API_PORT=8000

# ==============================================
# OPTIONAL DATABASE CONFIGURATION
# ==============================================

# PostgreSQL for Metadata (if using metadata-db profile)
POSTGRES_DB=rag_metadata
POSTGRES_USER=rag_user
POSTGRES_PASSWORD=secure_password_change_this

# Redis for Caching (if using cache profile)
REDIS_URL=redis://localhost:6379

# ==============================================
# DEVELOPMENT CONFIGURATION
# ==============================================

# Development Mode
DEBUG=false
DEVELOPMENT=false

# Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=3600

# ==============================================
# ENTERPRISE FEATURES (Optional)
# ==============================================

# Multi-tenant support
ENABLE_MULTI_TENANT=false
DEFAULT_TENANT_ID=default

# Audit logging
ENABLE_AUDIT_LOG=false
AUDIT_LOG_FILE=logs/audit.log

# Data retention
DATA_RETENTION_DAYS=90
AUTO_CLEANUP_ENABLED=false

# ==============================================
# MONITORING & OBSERVABILITY
# ==============================================

# Health check endpoint
HEALTH_CHECK_ENABLED=true

# Metrics collection
METRICS_ENABLED=false
METRICS_PORT=9090

# Distributed tracing
TRACING_ENABLED=false
JAEGER_ENDPOINT=http://localhost:14268

# ==============================================
# EXAMPLE VALUES FOR QUICK START
# ==============================================

# For local development, you can use these minimal settings:
# GEMINI_API_KEY=your_actual_gemini_key
# QDRANT_HOST=localhost
# QDRANT_PORT=6333
# LOG_LEVEL=DEBUG

# ==============================================
# SECURITY NOTES
# ==============================================

# 1. Never commit the actual .env file to version control
# 2. Use strong, unique passwords for production
# 3. Rotate API keys regularly
# 4. Enable authentication in production environments
# 5. Use HTTPS in production
# 6. Regularly update dependencies for security patches

# ==============================================
# QUICK SETUP GUIDE
# ==============================================

# 1. Copy this file: cp env_template.txt .env
# 2. Get Gemini API key from: https://makersuite.google.com/app/apikey
# 3. Start Qdrant: docker-compose up -d qdrant
# 4. Install dependencies: pip install -r requirements.txt
# 5. Run the application: python app.py

# For additional services:
# - Web UI: docker-compose --profile web-ui up -d
# - Cache: docker-compose --profile cache up -d
# - Metadata DB: docker-compose --profile metadata-db up -d

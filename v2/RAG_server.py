from vectorDBController import VectorDBController
from LLMController import LLMManager
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_core.documents import Document
from langchain_text_splitters import RecursiveCharacterTextSplitter
from typing import List

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.openapi.utils import get_openapi
from fastapi.openapi.docs import get_swagger_ui_html
from fastapi.openapi.docs import get_redoc_html

import gradio as gr

class RAGServer:
    def __init__(self, llm_manager: LLMManager):
        self.embeddings = llm_manager.embeddings
        self.text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        self.vector_db_controller = VectorDBController(embeddings=self.embeddings, text_splitter=self.text_splitter)
        self.vector_db_controller.load_vector_db("qdrant")
        self.vector_db_controller.load_existing_documents()
        self.app = FastAPI()
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        self.llm = llm_manager.llm
        self.base_retriever = self.vector_db_controller.vector_db.as_retriever(search_kwargs={"k": 20})
        # self.app.include_router(self.vector_db_controller.router)
        self.custom_prompt = PromptTemplate.from_template("""
        B·∫°n l√† m·ªôt tr·ª£ l√Ω cho c√°c nhi·ªám v·ª• tr·∫£ l·ªùi c√¢u h·ªèi.
        S·ª≠ d·ª•ng c√°c ƒëo·∫°n ng·ªØ c·∫£nh ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi.
        Tr·∫£ l·ªùi c√¢u h·ªèi c·∫ßn c√≥ s·ª± logic, c√°c th√¥ng tin c·∫ßn c√≥ ƒë·ªô ch√≠nh x√°c cao.
        N·∫øu kh√¥ng bi·∫øt c√¢u tr·∫£ l·ªùi, ch·ªâ c·∫ßn n√≥i r·∫±ng b·∫°n kh√¥ng bi·∫øt ho·∫∑c kh√¥ng c√≥ ƒë·ªß th√¥ng tin cho ph·∫ßn n√†o c·ªßa c√¢u h·ªèi.
        Tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† tr√≠ch d·∫´n ngu·ªìn [Sau t·ª´ng √Ω tr·∫£ l·ªùi, h√£y tr√≠ch d·∫´n ngu·ªìn t·ª´ c√°c ƒëo·∫°n ng·ªØ c·∫£nh ƒë√£ cung c·∫•p].

        Context:
        {context}
        Question: {question}
        Answer:
        """)
        self.rag_chain = (
            {"context": self.base_retriever | self.format_docs, "question": RunnablePassthrough()}
            | self.custom_prompt
            | self.llm
            | StrOutputParser()
        )

    def format_docs(self, docs: List[Document]):
        """
        Format the documents
        """
        formatted_context = []
        for doc in docs:
            source = doc.metadata.get("source", "unknown")
            content = doc.page_content
            formatted_context.append(f"Source: {source}\nContent: {content}")
        return "\n\n".join(formatted_context)

    def query(self, query: str, top_k: int = 10):
        """
        Query the vector DB
        """
        if not query:
            raise HTTPException(status_code=400, detail="Query is required")
        
        if top_k <= 0:
            raise HTTPException(status_code=400, detail="Top k must be greater than 0")
        
        try:
            docs_with_scores = self.vector_db_controller.vector_db.similarity_search_with_score(query, k=top_k)
            docs = [doc for doc, score in docs_with_scores if score >= 0.5]

            if not docs:
                raise HTTPException(status_code=404, detail="No documents found")

            # FIX: Invoke v·ªõi query thay v√¨ {"input": query, "context": docs}
            answer = self.rag_chain.invoke(query)
            
            #Generate answer documents
            related_docs = [
                {
                    "source": doc.metadata.get("source", "unknown"),
                    "content_snippet": doc.page_content[:300] + "..." if len(doc.page_content) > 300 else doc.page_content,
                }
                for doc in docs
            ]

            return answer, related_docs
        except Exception as e:
            raise HTTPException(status_code=500, detail=str(e))
        
    def list_documents(self):
        docs = sorted(list(self.vector_db_controller.document_tracker))
        print(f"Currently tracking {len(docs)} documents: {docs}")
        return docs

llm_manager = LLMManager()
rag_server = RAGServer(llm_manager)

#build simplified gradio interface
def gradio_query(question, top_k):
    try:
        answer, related_docs = rag_server.query(question, int(top_k))
        return answer
    except Exception as e:
        return f"L·ªói: {str(e)}"

def gradio_add_document(file):
    if file is None:
        return "Vui l√≤ng ch·ªçn file.", gr.update()
    try:
        result = rag_server.vector_db_controller.add_documents(file.name)
        # Refresh danh s√°ch documents
        updated_choices = rag_server.list_documents()
        return result, gr.update(choices=updated_choices)
    except Exception as e:
        return f"L·ªói: {str(e)}", gr.update()

def gradio_delete_document(filename):
    if not filename:
        return "Vui l√≤ng ch·ªçn file ƒë·ªÉ x√≥a.", gr.update()
    try:
        result = rag_server.vector_db_controller.delete_documents(filename)
        # Refresh danh s√°ch documents
        updated_choices = rag_server.list_documents()
        return result, gr.update(choices=updated_choices)
    except Exception as e:
        return f"L·ªói: {str(e)}", gr.update()

def gradio_list_documents():
    docs = rag_server.list_documents()
    return "\n".join(docs) if docs else "Ch∆∞a c√≥ t√†i li·ªáu n√†o."

def refresh_document_list():
    rag_server.vector_db_controller.load_existing_documents()  # ƒê·ªçc l·∫°i t·ª´ DB
    return gr.update(choices=rag_server.list_documents())

with gr.Blocks() as demo:
    gr.Markdown("# RAG System Server")
    
    with gr.Tab("Query"):
        with gr.Row():
            with gr.Column():
                query = gr.Textbox(label="Question", placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n...")
                top_k = gr.Slider(label="Top K", minimum=1, maximum=20, value=10)
                submit = gr.Button("Submit", variant="primary")
            with gr.Column():
                answer = gr.Textbox(label="Answer", placeholder="C√¢u tr·∫£ l·ªùi s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y", lines=10)
        submit.click(fn=gradio_query, inputs=[query, top_k], outputs=answer)

    with gr.Tab("Qu·∫£n l√Ω T√†i li·ªáu"):
        with gr.Row():
            with gr.Column():
                gr.Markdown("### Th√™m T√†i li·ªáu")
                file_input = gr.File(label="Ch·ªçn file ƒë·ªÉ upload (PDF, TXT)")
                add_btn = gr.Button("Th√™m T√†i li·ªáu", variant="primary")
                add_result = gr.Textbox(label="K·∫øt qu·∫£", lines=3)
                
            with gr.Column():
                gr.Markdown("### X√≥a T√†i li·ªáu")
                with gr.Row():
                    file_dropdown = gr.Dropdown(
                        label="Ch·ªçn file ƒë·ªÉ x√≥a", 
                        choices=rag_server.list_documents(),
                        interactive=True
                    )
                    refresh_btn = gr.Button("üîÑ", size="sm")
                del_btn = gr.Button("X√≥a T√†i li·ªáu", variant="stop")
                del_result = gr.Textbox(label="K·∫øt qu·∫£", lines=3)
                
                gr.Markdown("### Danh s√°ch T√†i li·ªáu Hi·ªán t·∫°i")
                list_result = gr.Textbox(
                    label="T√†i li·ªáu ƒë√£ c√≥", 
                    value=gradio_list_documents(),
                    lines=8,
                    interactive=False
                )
        
        # Event handlers v·ªõi auto-refresh
        add_btn.click(
            fn=gradio_add_document, 
            inputs=file_input, 
            outputs=[add_result, file_dropdown]
        ).then(
            fn=gradio_list_documents,
            outputs=list_result
        )
        
        del_btn.click(
            fn=gradio_delete_document, 
            inputs=file_dropdown, 
            outputs=[del_result, file_dropdown]
        ).then(
            fn=gradio_list_documents,
            outputs=list_result
        )
        
        refresh_btn.click(
            fn=refresh_document_list,
            outputs=file_dropdown
        ).then(
            fn=gradio_list_documents,
            outputs=list_result
        )

if __name__ == "__main__":
    demo.launch(share=False)